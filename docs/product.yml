{
  "openapi": "3.1.0",
  "info": {
    "title": "Java API Exercise - Extension Criteria",
    "description": "Java API MVC in-memory List Extension Criteria",
    "version": "0.2.3",
    "contact": {
      "name": "MVC in Memory Extension Exercise"
    }
  },
  "servers": [
    {
      "url": "http://localhost:4000"
    }
  ],
  "tags": [
    {
      "name": "products"
    }
  ],
  "paths": {
    "/products": {
      "post": {
        "tags": [
          "products"
        ],
        "summary": "Create a product",
        "description": "Add a new product to our list of available products",
        "operationId": "createProduct",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProduct"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create a new product",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Product with provided name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Get all products",
        "description": "Get all of the products from our list",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "Find all products with a given category (case insensitive). If no category parameter is provided, return all products.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get products from a given category, or all products if no product is supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllProducts"
                }
              }
            }
          },
          "404": {
            "description": "No products of the provided category were found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Get a specific product",
        "description": "Get a product by ID. Respond with a 404 error message if that product doesn't exist",
        "operationId": "getSpecificProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the product to get",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Specific product returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "products"
        ],
        "summary": "Update a product",
        "description": "Update an existing product by ID",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the product to update",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProduct"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Product with provided name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "products"
        ],
        "summary": "Delete a product",
        "description": "Remove a product from our list of products",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the product to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateProduct": {
        "type": "object",
        "required": [
          "name",
          "category",
          "price"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "How to build APIs"
          },
          "category": {
            "type": "string",
            "example": "Book"
          },
          "price": {
            "type": "integer",
            "example": 1500
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "How to build APIs"
          },
          "category": {
            "type": "string",
            "example": "Book"
          },
          "price": {
            "type": "integer",
            "example": 1500
          }
        }
      },
      "AllProducts": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Product"
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Not found."
          }
        }
      }
    }
  }
}